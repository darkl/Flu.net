Flu.net allows you creating your own fluent syntax, in an easy declarative way.

For example, the following interfaces definition is translated into a fluent syntax ensuring uniquness of the 
"PrimaryKey" methods in the scope of a DataTable, and the uniquness of the methods "MakeNullable", "WithDefaultValue"
in the scope of a column.

[Inherited]
[Scope("DataTable")]
public interface IDataTableSyntax
{
    [UniqueInScope("DataTable")]
    [Alias("PrimaryKey")]
    IDataColumnSyntax<T> WithPrimaryKey<T>(string name);

    IDataColumnSyntax<T> WithColumn<T>(string name);
}

[Scope("DataColumn")]
public interface IDataColumnSyntax<T>
{
    [UniqueInScope("DataColumn")]
    IDataColumnSyntax<T> MakeNullable();

    [UniqueInScope("DataColumn")]
    IDataColumnSyntax<T> WithDefaultValue(T value);

    [UniqueInScope("DataTable")]
    [Alias("PrimaryKey")]
    IDataColumnSyntax<T> MakePrimaryKey();
}