//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Flunet.Samples.DataSets.Generated
{
    
    
    public partial class DataSetSyntax
    {
        
        public interface IState0
        {
            
            IState2 WithTable(string name);
        }
        
        public interface IState1
        {
        }
        
        public interface IState2
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithPrimaryKey<T>(string name)
            ;
            
            IState6<T> WithColumn<T>(string name)
            ;
            
            IState3 IsChildOf(string tableName);
            
            IState3 IsParentOf(string tableName);
        }
        
        public interface IState3
        {
            
            IState4 WithParentKey(string key);
        }
        
        public interface IState4
        {
            
            IState5 WithChildKey(string key);
        }
        
        public interface IState5
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithPrimaryKey<T>(string name)
            ;
            
            IState6<T> WithColumn<T>(string name)
            ;
            
            IState3 IsChildOf(string tableName);
            
            IState3 IsParentOf(string tableName);
            
            IState2 Named(string key);
        }
        
        public interface IState6<T>
        
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithPrimaryKey<T>(string name)
            ;
            
            IState6<T> WithColumn<T>(string name)
            ;
            
            IState3 IsChildOf(string tableName);
            
            IState3 IsParentOf(string tableName);
            
            IState14<T> MakeNullable();
            
            IState12 WithDefaultValue(T value);
            
            IState7<T> MakePrimaryKey();
        }
        
        public interface IState7<T>
        
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithColumn<T>(string name)
            ;
            
            IState8 IsChildOf(string tableName);
            
            IState8 IsParentOf(string tableName);
            
            IState15<T> MakeNullable();
            
            IState13 WithDefaultValue(T value);
        }
        
        public interface IState8
        {
            
            IState9 WithParentKey(string key);
        }
        
        public interface IState9
        {
            
            IState10 WithChildKey(string key);
        }
        
        public interface IState10
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithColumn<T>(string name)
            ;
            
            IState8 IsChildOf(string tableName);
            
            IState8 IsParentOf(string tableName);
            
            IState11 Named(string key);
        }
        
        public interface IState11
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithColumn<T>(string name)
            ;
            
            IState8 IsChildOf(string tableName);
            
            IState8 IsParentOf(string tableName);
        }
        
        public interface IState12
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithPrimaryKey<T>(string name)
            ;
            
            IState6<T> WithColumn<T>(string name)
            ;
            
            IState3 IsChildOf(string tableName);
            
            IState3 IsParentOf(string tableName);
            
            IState16 MakeNullable();
            
            IState13 MakePrimaryKey();
        }
        
        public interface IState13
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithColumn<T>(string name)
            ;
            
            IState8 IsChildOf(string tableName);
            
            IState8 IsParentOf(string tableName);
            
            IState11 MakeNullable();
        }
        
        public interface IState14<T>
        
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithPrimaryKey<T>(string name)
            ;
            
            IState6<T> WithColumn<T>(string name)
            ;
            
            IState3 IsChildOf(string tableName);
            
            IState3 IsParentOf(string tableName);
            
            IState16 WithDefaultValue(T value);
            
            IState15<T> MakePrimaryKey();
        }
        
        public interface IState15<T>
        
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithColumn<T>(string name)
            ;
            
            IState8 IsChildOf(string tableName);
            
            IState8 IsParentOf(string tableName);
            
            IState11 WithDefaultValue(T value);
        }
        
        public interface IState16
        {
            
            IState2 WithTable(string name);
            
            IState7<T> WithPrimaryKey<T>(string name)
            ;
            
            IState6<T> WithColumn<T>(string name)
            ;
            
            IState3 IsChildOf(string tableName);
            
            IState3 IsParentOf(string tableName);
            
            IState11 MakePrimaryKey();
        }
        
        internal abstract class SyntaxImplementer<T> : IState0, IState1, IState2, IState3, IState4, IState5, IState6<T>, IState7<T>, IState8, IState9, IState10, IState11, IState12, IState13, IState14<T>, IState15<T>, IState16
        
        {
            
            protected abstract SyntaxImplementer<T> InnerWithTable(string name);
            
            protected abstract SyntaxImplementer<T> InnerWithPrimaryKey<T>(string name)
            ;
            
            protected abstract SyntaxImplementer<T> InnerWithColumn<T>(string name)
            ;
            
            protected abstract SyntaxImplementer<T> InnerIsChildOf(string tableName);
            
            protected abstract SyntaxImplementer<T> InnerIsParentOf(string tableName);
            
            protected abstract SyntaxImplementer<T> InnerMakeNullable();
            
            protected abstract SyntaxImplementer<T> InnerWithDefaultValue(T value);
            
            protected abstract SyntaxImplementer<T> InnerMakePrimaryKey();
            
            protected abstract SyntaxImplementer<T> InnerWithParentKey(string key);
            
            protected abstract SyntaxImplementer<T> InnerWithChildKey(string key);
            
            protected abstract SyntaxImplementer<T> InnerNamed(string key);
            
            IState2 IState0.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState2 IState2.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState2.WithPrimaryKey<T>(string name)
            
            {
                return this.InnerWithPrimaryKey<T>(name);
            }
            
            IState6<T> IState2.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState3 IState2.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState3 IState2.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState4 IState3.WithParentKey(string key)
            {
                return this.InnerWithParentKey(key);
            }
            
            IState5 IState4.WithChildKey(string key)
            {
                return this.InnerWithChildKey(key);
            }
            
            IState2 IState5.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState5.WithPrimaryKey<T>(string name)
            
            {
                return this.InnerWithPrimaryKey<T>(name);
            }
            
            IState6<T> IState5.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState3 IState5.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState3 IState5.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState2 IState5.Named(string key)
            {
                return this.InnerNamed(key);
            }
            
            IState2 IState6<T>.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState6<T>.WithPrimaryKey<T>(string name)
            
            {
                return this.InnerWithPrimaryKey<T>(name);
            }
            
            IState6<T> IState6<T>.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState3 IState6<T>.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState3 IState6<T>.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState14<T> IState6<T>.MakeNullable()
            {
                return this.InnerMakeNullable();
            }
            
            IState12 IState6<T>.WithDefaultValue(T value)
            {
                return this.InnerWithDefaultValue(value);
            }
            
            IState7<T> IState6<T>.MakePrimaryKey()
            {
                return this.InnerMakePrimaryKey();
            }
            
            IState2 IState7<T>.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState7<T>.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState8 IState7<T>.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState8 IState7<T>.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState15<T> IState7<T>.MakeNullable()
            {
                return this.InnerMakeNullable();
            }
            
            IState13 IState7<T>.WithDefaultValue(T value)
            {
                return this.InnerWithDefaultValue(value);
            }
            
            IState9 IState8.WithParentKey(string key)
            {
                return this.InnerWithParentKey(key);
            }
            
            IState10 IState9.WithChildKey(string key)
            {
                return this.InnerWithChildKey(key);
            }
            
            IState2 IState10.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState10.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState8 IState10.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState8 IState10.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState11 IState10.Named(string key)
            {
                return this.InnerNamed(key);
            }
            
            IState2 IState11.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState11.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState8 IState11.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState8 IState11.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState2 IState12.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState12.WithPrimaryKey<T>(string name)
            
            {
                return this.InnerWithPrimaryKey<T>(name);
            }
            
            IState6<T> IState12.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState3 IState12.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState3 IState12.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState16 IState12.MakeNullable()
            {
                return this.InnerMakeNullable();
            }
            
            IState13 IState12.MakePrimaryKey()
            {
                return this.InnerMakePrimaryKey();
            }
            
            IState2 IState13.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState13.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState8 IState13.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState8 IState13.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState11 IState13.MakeNullable()
            {
                return this.InnerMakeNullable();
            }
            
            IState2 IState14<T>.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState14<T>.WithPrimaryKey<T>(string name)
            
            {
                return this.InnerWithPrimaryKey<T>(name);
            }
            
            IState6<T> IState14<T>.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState3 IState14<T>.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState3 IState14<T>.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState16 IState14<T>.WithDefaultValue(T value)
            {
                return this.InnerWithDefaultValue(value);
            }
            
            IState15<T> IState14<T>.MakePrimaryKey()
            {
                return this.InnerMakePrimaryKey();
            }
            
            IState2 IState15<T>.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState15<T>.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState8 IState15<T>.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState8 IState15<T>.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState11 IState15<T>.WithDefaultValue(T value)
            {
                return this.InnerWithDefaultValue(value);
            }
            
            IState2 IState16.WithTable(string name)
            {
                return this.InnerWithTable(name);
            }
            
            IState7<T> IState16.WithPrimaryKey<T>(string name)
            
            {
                return this.InnerWithPrimaryKey<T>(name);
            }
            
            IState6<T> IState16.WithColumn<T>(string name)
            
            {
                return this.InnerWithColumn<T>(name);
            }
            
            IState3 IState16.IsChildOf(string tableName)
            {
                return this.InnerIsChildOf(tableName);
            }
            
            IState3 IState16.IsParentOf(string tableName)
            {
                return this.InnerIsParentOf(tableName);
            }
            
            IState11 IState16.MakePrimaryKey()
            {
                return this.InnerMakePrimaryKey();
            }
        }
    }
}
